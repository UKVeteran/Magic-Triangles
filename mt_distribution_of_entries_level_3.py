# -*- coding: utf-8 -*-
"""MT-Distribution of Entries - Level 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HdwxYM2L-91iaEsKGDDq4mkUEKQJO2m6

***3-Level Triangles ***
This code collects the data to produce Figure 7 in the paper.
"""

# function to find all 3-level central hexagon solutions
def findCentralHexagons():
  sols = []

  # consider all triples of integers 1 <= a3 < a6 < a8 <= 9:
  for a3 in range(1,10):
    for a6 in range(a3+1,10):
      for a8 in range(a6+1,10):
        # there are six remaining numbers for the other positions
        remainingNums = [i for i in range(1,10) if (i != a3 and i != a6 and i != a8)]

        # iterate over triples of distinct indexes from 0, ..., 5
        for i in range(6):
          for j in range(6):
            if i == j:
              continue
            for k in range(6):
              if i == k or j == k:
                continue
              a2 = remainingNums[i]
              a4 = remainingNums[j]
              a7 = remainingNums[k]

              if a2 + a3 + a6 == 15 and a3 + a4 + a8 == 15 and a6 + a7 + a8 == 15:
                sols.append([a2, a3, a4, a6, a7, a8])
                print([a2, a3, a4, a6, a7, a8])

  return sols

# function to compute fequencies of each integer in each position
def computeFrequencies(centralHexs):
  corners = [0]*9
  borders = [0]*9
  interior = [0]*9

  for sol in centralHexs:
    a2 = sol[0]
    a3 = sol[1]
    a4 = sol[2]
    a6 = sol[3]
    a7 = sol[4]
    a8 = sol[5]

    borders[a3-1] += 6
    borders[a6-1] += 6
    borders[a8-1] += 6

    interior[a2-1] += 6
    interior[a4-1] += 6
    interior[a7-1] += 6

    remaining = [i for i in range(1,10) if i not in sol]
    for k in remaining:
      corners[k-1] += 6

  return corners, borders, interior

Now we can find all 16 central hexagon solutions for 3-level magic triangles

sols = findCentralHexagons()
sols

"""Next we compute the number of times that each integer is in the corner, border, and interior positiosn for all 96 3-level magic triangles"""

corners, borders, interior = computeFrequencies(sols)

print(corners)
print(borders)
print(interior)

# function to print coordinate lists for the plot in the paper
def printCoordStr(counts):
  s = "{"
  for i,c in enumerate(counts):
    s += "(" + str(i+1) + "," + str(c) + ") "
  s += "}"
  return s

print(printCoordStr(corners))
print(printCoordStr(borders))
print(printCoordStr(interior))